
class Solution
{
    //Function to find a solved Sudoku. 
    
    static boolean SolveSudoku(int grid[][])
    {
        // add your code here
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==0)
                {
                    for(int val=1;val<=9;val++)
                    {
                        if(safe(grid,i,j,val))
                        {
                            grid[i][j]=val;
                            boolean s=SolveSudoku(grid);
                            if(s)
                            {
                                return true;
                            }
                            else
                           {
                               grid[i][j]=0;
                           }
                        }
                        
                    }
                    return false;
                }
               
            }
        }
        return true;
    }
    private static boolean safe(int[][] grid,int i,int j,int val){
        for(int row=0;row<9;row++)
        {
            if(grid[row][j]==val)
                return false;
                
        }
        for(int col=0;col<9;col++)
        {
            if(grid[i][col]==val)
                return false;
                
        }
        int cellx=(i/3)*3;//1
        int celly=(j/3)*3;//1
         for(int row=0;row<9;row++)
        {
            if(grid[(cellx)+(row/3)][(celly)+(row%3)]==val)
                return false;
                
        }
        return true;
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
       for(int i=0;i<9;i++)
            {
                for(int j=0;j<9;j++)
                {
                    System.out.print(grid[i][j]+" ");
                }
            }
          
    }
}
