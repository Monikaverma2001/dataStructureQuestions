Unique Paths in grid:
this is the question of leetcode : https://leetcode.com/problems/unique-paths/description/
question:

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.


We can solve it with 3 ways: 1.recursion 2.top-down[dp] 3.bottom-up[dp]

here the Solution number 1.
pseudo code:
class Solution {
    public int uniquePaths(int m, int n) {
    //m is rows
    //n is columns
        return uniquePaths(m, n,0,0);
    }
     public int uniquePaths(int m, int n,int i,int j) {
    //i is start rows
    //j is start columns
        if(i==m-1 || j==n-1)
          return 1;
        return  uniquePaths(m, n,i+1,j)+ uniquePaths(m, n,i,j+1);
    }
}


solution 2 : by DP(Dynamic Programming)---top-down
  class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m+1][n+1];
        for(int i=0;i<m;i++)
        {
            int left=0,right=0;
            for(int j=0;j<n;j++)
            {
                if(i==0&&j==0)
                dp[i][j]=1;
                
                else
                {
                    if(i>0)
                    {
                        left=dp[i-1][j];
                    }
                     if(j>0)
                    {
                        right=dp[i][j-1];
                    }
                     dp[i][j]=left+right;
                }
               
            }
        }
         for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
               System.out.print(dp[i][j]+"   ");
            }
            System.out.println();
        }
        return dp[m-1][n-1];
    }
}


Solution 3: by Dp(Dynamic Programming)--bottom up
class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][]=new int[m+1][n+1];
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                
                    dp[i][j]=-1;
                
            }
        }
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
               System.out.print(dp[i][j]+"   ");
            }
            System.out.println();
        }
        

        return uniquePaths(m-1,n-1,m-1,n-1,dp);
    }
     public int uniquePaths(int m, int n,int i,int j,int[][] dp) {
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(i==0 || j==0)
            return 1;
        

        dp[i-1][j] =uniquePaths(m,n,i-1,j,dp);
        
        dp[i][j-1]=uniquePaths(m,n,i,j-1,dp);
          
       return dp[i-1][j-1]=dp[i-1][j]+dp[i][j-1];
    }
}
